Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.




--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

class Solution {
public:
    
    bool row(vector<vector<char>>board,int x,char val){
        
        if(val == '.' )
            return true;
        int cnt = 0;
        for(int i=0;i<9;i++){
            if(board[x][i] == val)
                cnt++;
            if(cnt > 1) return false;
        }
        return true;
    }
    
    bool col(vector<vector<char>>board,int y,char val){
        
        if(val == '.')
            return true;
        int cnt = 0;
        for(int i=0;i<9;i++){
            if(board[i][y] == val)
                cnt++;
            if(cnt > 1) return false;
        }
        return true;
    }
    
    bool subMatrix(vector<vector<char>> board,int i,int j,char val){
        if(val == '.')
            return true;
        int sx = 3 * (i/3);
        int sy = 3 * (j/3);
        int cnt  = 0;
        for(int i=sx;i<sx+3;i++){
            for(int j = sy;j<sy+3;j++){
                if(board[i][j] == val)
                    cnt++;
                if(cnt > 1) return false;
            }
        }
        return true;
    }
    
    bool isValidSudoku(vector<vector<char>>& board) {
        
        for(int i=0;i < 9;i++){
            for(int j=0;j < 9;j++){
                int val = row(board,i,board[i][j]) and col(board,j,board[i][j]) and subMatrix(board,i,j,board[i][j]);
                if(val == false)
                    return false;
            }
        }
        return true;
    }
};
