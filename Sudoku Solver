
Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.


https://leetcode.com/problems/sudoku-solver/

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------


class Solution {
public:
    
    
    bool isValid(vector<vector<char>>&board,int x,int y,int po){
        
      //  cout<<x<<" "<<y<<" "<<po<<"\n";
        
        for(int i=0;i < 9;i++){
            if(board[x][i]-'0' == po)
                return false;
        }
        
        for(int i=0;i < 9;i++){
            if(board[i][y]-'0' == po)
                return false;
        }
        
        int sx = 3 * (x/3);
        int sy = 3 * (y/3);
        
        for(int i=sx; i < sx+3;i ++){
            for(int j = sy;j <sy+3;j++){
                if(board[i][j]-'0' == po)
                    return false;
            }
        }
        return true;
    }
    
    
    int go(vector<vector<char>>&board,int i,int j){
        
        
        if(i == 9)  return 1;
      //  cout<<i<<" "<<j<<"\n";
        int ni = 0, nj = 0;
        
        if(j == 8){
            ni = i+1;
            nj = 0;
        }
        else{
            ni = i;
            nj = j+1;
        }
        
        if(board[i][j] != '.')  return go(board,ni,nj);
            
            for(int po = 1;po <= 9;po++){

               // cout<<isValid(board,i,j,po)<<" ";
                
                if(isValid(board,i,j,po)){
                    //cout<<po<<" ";
                     board[i][j] = po+'0';
                    //cout<<board[i][j]<<" ";
                    if(go(board,ni,nj))
                             return 1;
                    board[i][j] = '.';
                   
                }
                
                    
            }
         return 0;    
    }
    
    
    
    void solveSudoku(vector<vector<char>>& board) {
        
       int val =  go(board,0,0);    
        
    }
};
